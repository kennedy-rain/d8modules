<?php

use \Drupal\node\Entity\Node;
use \Drupal\user\Entity\User;
use \Drupal\Component\Utility\Random;
use \Drupal\taxonomy\Entity\Term;
use Drupal\isueo_helpers\ISUEOHelpers;
use Drupal\redirect\Entity\Redirect;

/**
 * Implements hook_rebuild()
 */
function staff_profile_primary_rebuild()
{
  \Drupal::logger('staff_profile_primary')->info('Starting staff profile refresh from hook_rebuild page');
  staff_profile_primary_profile_from_database();
  staff_profile_primary_web_editor_training();

  /*
  // Code to set SmugMug ID's from a file that contains: netID:SmugMugId
  $file = fopen(\Drupal::service('module_handler')->getModule('staff_profile_primary')->getPath() . '/smugmug.txt', 'r');
  while ($line = fgets($file)) {
    $exploded = explode(':', $line);

    $nids = \Drupal::entityQuery('node')->accessCheck(false)->condition('type', 'staff_profile')->condition('field_staff_profile_netid', $exploded[0])->execute();
    $nodes =  Node::loadMultiple($nids);
    if (!empty($nodes)) {
      foreach ($nodes as $node) {
        \Drupal::logger('staff_profile_primary')->info('Found: ' . count($nodes) . $exploded[0] . ' - ' . $exploded[1]);
        $node->set('field_staff_profile_smugmug', trim($exploded[1]))->save();
      }
    } else {
      \Drupal::logger('staff_profile_primary')->info('Not Found: ' . $exploded[0]);
    }
  }
  */
}

/**
 * Implements hook_cron().
 */
function staff_profile_primary_cron()
{
  //staff_profile_primary_profile_from_database();
  //staff_profile_primary_web_editor_training();
}

function staff_profile_primary_profile_from_database()
{
  $setwise_netid = [];
  $nodes_netid = [];
  $nodes_staffid = [];
  $node_ids_active = [];
  $node_ids_setwise = [];
  $county_taxonomy = ISUEOHelpers\Taxonomy::get_terms('counties_in_iowa');
  $program_area_taxonomy = ISUEOHelpers\Taxonomy::get_terms('program_areas');
  $staff_positions = ISUEOHelpers\Taxonomy::get_terms('staff_positions');
  $primary_config = \Drupal::config('staff_profile_primary.settings');

  // Get entries from Setwise
  $raw = ISUEOHelpers\Files::fetch_url('https://directory.extension.iastate.edu/api/employees?token=mC5EFLgaEkTEcnFc3qhzs2mAtRtjP6fF');
  $entries = json_decode($raw, true);
  $address_fields = ['CITY', 'ADDRESS STREET 1', 'ADDRESS STREET 2',];
  foreach ($entries as $entry) {
    if (str_contains($entry['EMAIL ADDRESS'], '@iastate.edu')) {
      if (array_key_exists('PHONE', $entry) && !empty($entry['PHONE'])) {
        $entry['PHONE'] = ISUEOHelpers\General::format_phone_number($entry['PHONE']);
      }
      if (array_key_exists('ZIPCODE', $entry) && !empty($entry['ZIPCODE'])) {
        $entry['ZIPCODE'] = ISUEOHelpers\General::format_zip_code($entry['ZIPCODE']);
      }
      if (!array_key_exists('STATE', $entry) || empty($entry['STATE'])) {
        $entry['STATE'] = 'IA';
      }

      // Make Upper case addresses into mixed case
      foreach ($address_fields as $address_field) {
        $tmp_value = ucwords(strtolower($entry[$address_field]));
        $tmp_value = str_replace([' 4-h', 'Po B', 'P.o. B', ' Us ',], [' 4-H', 'PO B', 'PO B', ' US ',], $tmp_value);
        if ($entry[$address_field] != $tmp_value) {
          $entry[$address_field] = $tmp_value;
        }
      }
      $netid = str_replace('@iastate.edu', '', $entry['EMAIL ADDRESS']);
      $setwise_netid[$netid] = $entry;
    }
  }

  // Make sure we have the minimum number of staff from the database. If not, the database may not have gotten populated correctly
  if (count($setwise_netid) < $primary_config->get('minimum_staff')) {
    \Drupal::logger('staff_profile_primary')->info('Expected records: ' . $primary_config->get('minimum_staff') . ' Received: ' . count($setwise_netid) . ' - Something could be wrong, so exiting import of records');
    return;
  }

  // Get current nodes
  $nodes = Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'staff_profile',]);
  foreach ($nodes as $node) {
    $nodes_staffid[$node->field_staff_profile_staffid->value] = $node;
    $nodes_netid[$node->field_staff_profile_netid->value] = $node;
    if ($node->isPublished() && !empty($node->field_staff_profile_staffid->getString())) {
      $node_ids_active[] = $node->id();
    }
  }
  echo 'Nodes: ' . count($nodes) . PHP_EOL;
  echo 'staffids: ' . count($nodes_staffid) . PHP_EOL;
  echo 'netids: ' . count($nodes_netid) . PHP_EOL;
  echo 'active: ' . count($node_ids_active) . PHP_EOL;
  echo 'SetWise: ' . count($setwise_netid) . PHP_EOL;

  // Step through the nodes from SetWise
  foreach ($setwise_netid as $netid => $setwise) {
    $save = false;

    // Try to find an existing node, otherwise create one
    if (array_key_exists($netid, $nodes_netid)) {
      $node = $nodes_netid[$netid];
          } elseif (array_key_exists($setwise['STAFFID'], $nodes_staffid)) {
            $node = $nodes_staffid[$setwise['STAFFID']];
    } else {
      $node = Node::create(array('type' => 'staff_profile', 'title' => $setwise['LAST NAME'] . ', ' . $setwise['FIRST NAME']));
      $node->set('field_staff_profile_netid', $netid);
      $node->save();
    }

    // Publish unpublished nodes
    if (!$node->isPublished()) {
      $node->setPublished();
      $save = true;
    }

    // Handle NetID
    if ($node->get('field_staff_profile_netid')->value != $netid) {
      $node->set('field_staff_profile_netid', $netid);
      $save = true;
    }

    // Handle a bunch of fields in a foreach loop
    $fields_all = [
      ['FIRST NAME', 'field_staff_profile_first_name', 'field_staff_profile_pref_name',],
      ['LAST NAME', 'field_staff_profile_last_name', '',],
      ['EMAIL ADDRESS', 'field_staff_profile_email', '',],
      ['PHONE', 'field_staff_profile_phone', 'field_staff_profile_pref_phone',],
      ['FAX', 'field_staff_profile_fax', '',],
      ['STAFFID', 'field_staff_profile_staffid', '',],
      ['REGION', 'field_staff_profile_region', '',],
      ['JOB TITLE', 'field_staff_profile_job_title', 'field_staff_profile_pref_title',],
    ];
    foreach ($fields_all as $fields) {
      // Make sure SetWise has a value, even if it's an empty string
      if (!array_key_exists($fields[0], $setwise)) {
        $setwise[$fields[0]] = '';
      }
      $old_value = $node->get($fields[1])->value;
      $new_value = $setwise[$fields[0]];

      // See if the value has changed, if so, set it
      if ($new_value != $old_value) {
        $node->set($fields[1], $new_value);
        // Also handle if there is a preferred field
        if (!empty($fields[2])) {
          $pref_value = $node->get($fields[2])->value;
          if ($old_value == $pref_value && !empty($new_value)) {
            $node->set($fields[2], $new_value);
          }
        }
        $save = true;
      }
    }

    //Handle Address
    $fields_all = [
      ['ADDRESS STREET 1', 'address_line1',],
      ['ADDRESS STREET 2', 'address_line2',],
      ['CITY', 'locality',],
      ['STATE', 'administrative_area',],
      ['ZIPCODE', 'postal_code',],
    ];
    $old_addr = $node->get('field_staff_profile_addr')->getValue()[0];
    foreach ($fields_all as $fields) {
      if (empty($setwise[$fields[0]])) {
        $setwise[$fields[0]] = $fields[0] == 'STATE' ? 'IA' : '';
      }
      if ($setwise[$fields[0]] != $old_addr[$fields[1]]) {
        $old_addr[$fields[1]] = $setwise[$fields[0]];
        $save = true;
      }
    }
    $old_addr['country_code'] = 'US';
    $node->field_staff_profile_addr = $old_addr;

    // Handle Base County
    $new_value = array_key_exists('BASE COUNTY', $setwise) ? ISUEOHelpers\Taxonomy::get_term_id(ISUEOHelpers\General::fix_county_name($setwise['BASE COUNTY']), $county_taxonomy, 'counties_in_iowa', false) : 0;
    if ($node->field_staff_profile_base_county->target_id != $new_value) {
      $node->field_staff_profile_base_county = ['target_id' => $new_value,];
      $save = true;
    }

    // Handle Counties Served
    $raw = array_key_exists('COUNTIES SERVED', $setwise) ? $setwise['COUNTIES SERVED'] : '';
    $newArray = [];
    foreach (explode(',', $raw) as $county_name) {
      if (!empty($county_name)) {
        $newArray[] = ISUEOHelpers\Taxonomy::get_term_id(ISUEOHelpers\General::fix_county_name($county_name), $county_taxonomy, 'counties_in_iowa', false);
      }
    }
    sort($newArray);
    $newString = implode(', ', $newArray);
    if ($newString != $node->field_staff_profile_cty_served->getString()) {
      $node->field_staff_profile_cty_served = $newArray;
      $save = true;
    }

    // Handle Program Areas
    $raw = array_key_exists('PROGRAM AREAS', $setwise) ? $setwise['PROGRAM AREAS'] : '';
    if (!empty($raw)) {
      $raw = str_replace('Youth and 4-H', '4-H Youth Development', $raw);
      $raw = str_replace(' (ANR)', '', $raw);
      $raw = str_replace('Communities and Economic Development (CED)', 'Community and Economic Development', $raw);
      $raw = str_replace('Human Sciences Extension and Outreach (HSEO)', 'Human Sciences', $raw);
    }
    $newArray = [];
    foreach (explode(',', $raw) as $program_area) {
      if (!empty($program_area)) {
        $newArray[] = ISUEOHelpers\Taxonomy::get_term_id($program_area, $program_area_taxonomy, 'program_areas', true);
      }
    }
    sort($newArray);
    $new_value = implode(', ', $newArray);
    if ($new_value != $node->field_staff_profile_pgm_areas->getString()) {
      $node->field_staff_profile_pgm_areas = $newArray;
      $save = true;
    }

    // Handle Location
    switch (empty($setwise['LOCATION']) ? '3' : $setwise['LOCATION']) {
      case '1':
        $newString = 'FLD-CNTYPD';
        break;
      case '2':
        $newString = 'FLD-ISU-PD';
        break;
      case '3':
      default:
        $newString = 'CAMPUS';
        break;
    }
    if ($newString != $node->field_staff_profile_location->getString()) {
      $node->set('field_staff_profile_location',  $newString);
      $save = true;
    }

    // Handle Position
    $new_value = _staff_profile_primary_get_position($node, $staff_positions);
    if ($node->field_staff_profile_position->getString() != $new_value) {
      $node->set('field_staff_profile_position', $new_value);
      $save = true;

      // Now now check if user should have the Regional Director Role
      $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => $netid,]);
      if ($users) {
        $user = reset($users);
        if ($new_value == 0) {
          $user->removeRole('regional_director')->save();
        } else {
          $term = Term::load($new_value);
          if ($term->getName() == 'Regional Director') {
            if ($users) {
              $user->addRole('regional_director')->save();
            }
          }
        }
      }
    }

    // If a value has changed, make sure the Title is right, and save the node
    if ($save) {
      $new_value = $node->field_staff_profile_pref_name->value . ' ' . $node->field_staff_profile_last_name->value;
      if ($node->getTitle() != $new_value) {
        $node->setTitle($new_value);
      }
      //echo "Saving: " . $node->id() . PHP_EOL;
      $node->save();
    }

    $node_ids_setwise[] = $node->id();
  }

  // Unpublish staff nodes that have dropped out of the feed
  foreach (array_diff($node_ids_active, $node_ids_setwise) as $nid) {
    $node = Node::load($nid);
    $node->setUnpublished();
    $node->save();
  }

  // Handle Regional Director overrides
  $overrides = explode("\r\n", $primary_config->get('reed_overrides'));
  foreach ($overrides as $override) {
    if (empty($override)) {
      continue;
    }
    list($k, $v) = explode('|', $override);
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(['name' => $k,]);
    if ($users) {
      $user = reset($users);
      if ($user->hasRole('regional_director') && 'none' == trim(strtolower($v))) {
        $user->removeRole('regional_director')->save();
      }
      if (!$user->hasRole('regional_director') && 'none' != trim(strtolower($v))) {
        $user->addRole('regional_director')->save();
      }
    }
  }
}

/*
 * Implements hook_preprocess_views_view()
 */
function staff_profile_primary_preprocess_views_view(&$variables)
{
  $variables['#cache']['contexts'][] = 'route';
  if ($variables['view_array']['#name'] == 'staff_directory') {
    $variables['#attached']['library'][] = 'staff_profile_primary/staff_directory';
  }
}

/**
 * Implements hook_form_alter().
 */
function staff_profile_primary_form_node_form_alter(&$form, &$form_state, $form_id)
{
  // Make sure we're on the staff_profile node edit screen
  $node = $form_state->getFormObject()->getEntity();
  if ($node->getType() == 'staff_profile') {

    // Set Many fields to readonly when user does't have "edit any staff_profile content" permission
    $user = \Drupal::currentUser();
    if (!$user->hasPermission('edit any staff_profile content') && !empty($node->field_staff_profile_staffid->value)) {
      staff_profile_mark_database_fields_readonly($form);
    }
    // Disable Sort order, not needed on the primary site
    $form['field_staff_profile_sort_order']['widget'][0]['value']['#access'] = FALSE;
    $form['field_staff_profile_sort_order']['widget'][0]['value']['#disabled'] = TRUE;
    $form['field_staff_profile_sort_order']['widget'][0]['value']['#description'] = 'Sort order isn\'t used on this site, so it\'s disabled.';
  }
}

/*
 * Implements hook_ENTITY_TYPE_presave()
 */
function staff_profile_primary_node_presave($entity)
{
  if ($entity->getType() == 'staff_profile') {
    // Set the owner of the new node, will probably need to create the user
    $users = \Drupal::entityTypeManager()->getStorage('user')->loadByProperties(array('name' => $entity->field_staff_profile_netid->value));
    $owner = reset($users);
    if (!$owner) {
      $owner = User::create(array('name' => $entity->field_staff_profile_netid, 'mail' => $entity->field_staff_profile_email, 'pass' => rand_string(40)));
      $owner->activate()->save();
    }

    // Activate user if it's blocked and node is published
    if ($owner->isBlocked() && $entity->isPublished()) {
      $owner->activate()->save();
    }

    // Block user if it's active and the node is unpublished
    if ($owner->isActive() && !$entity->isPublished()) {
      $owner->block()->save();
    }

    $entity->setOwner($owner);
    $entity->setTitle($entity->field_staff_profile_pref_name->value . ' ' . $entity->field_staff_profile_last_name->value);

    //Convert SmugMug URL into just the SmugMug ID value
    $smugmugID = $entity->field_staff_profile_smugmug->value;
    preg_match('/^https?:\/\/(isuextensionimages\.)?smugmug.com\/[A-Za-z0-9\-\_\/]*i\-(?<id>[A-Za-z0-9]+)(\/A)?$/', $smugmugID, $matches);
    $smugmugID = isset($matches['id']) ? 'i-' . $matches['id'] : $smugmugID;
    //if (substr($smugmugID, -2) == '/A') {
    //  $smugmugID = substr($smugmugID, 0, strlen($smugmugID) - 2);
    //}
    $entity->field_staff_profile_smugmug->value = $smugmugID;

    // In the Custodian of Public Record field, set a value of false to null
    if ($entity->field_custodian_of_public_record->value == false) {
      $entity->field_custodian_of_public_record->value = null;
    }
  }
}

function rand_string($strength = 40)
{
  $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ?!@#$%&*()_+-=';
  $length = strlen($chars);
  $rand_string = '';
  try {
    for ($i = 0; $i < $strength; $i++) {
      $rand_char = $chars[random_int(0, $length - 1)];
      $rand_string .= $rand_char;
    }
  } catch (\Exception $e) {
    //In cases where getrandom(2) or /dev/urandom fails, not cryptographically secure
    $rand_string = '';
    for ($i = 0; $i < $strength; $i++) {
      $rand_char = $chars[mt_rand(0, $length - 1)];
      $rand_string .= $rand_char;
    }
  }
  return $rand_string;
}

// This function helps take Web Editor Training functions from Moodle, and puts it into the staff directory
function staff_profile_primary_web_editor_training()
{
  $editor_qualifications = ISUEOHelpers\Taxonomy::get_terms('editor_qualifications');

  $buffer = ISUEOHelpers\Files::fetch_url('https://datastore.exnet.iastate.edu/StaffDir/WebEditorTraining.json');
  $json_trainings = json_decode($buffer, TRUE);

  foreach ($json_trainings as $training) {
    //Skip the headers, also don't need Advanced (1048) or WordPress (3700)
    if ($training['Email'] == 'Email') continue;
    if ($training['coursemoduleid'] == '1048' || $training['coursemoduleid'] == '3700') continue;

    // Get taxonomy term id, and skip record if it's not found
    $course = 0;
    switch ($training['coursemoduleid']) {
      case '10712':  // Drupal 8/9/10
        $course = $editor_qualifications['Drupal 8 Training'];
        break;
      case '1041':  // Drupal 7
        $course = $editor_qualifications['Drupal 7 Training'];
        break;
      case '1044':  // Drupal 6
        $course = $editor_qualifications['Drupal 6 Training'];
        break;
      default:
        \Drupal::logger('staff_profile_primary')->info('Course is unknown, not sure why');
        $course = 0;
    }
    if ($course == 0) continue;

    //Get the node for this user, if one exists
    $usernodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['field_staff_profile_email' => $training['Email']]);
    $usernode = reset($usernodes);
    if ($usernode) {
      // Get the existing qualifications
      $existing_terms = array();
      $qualifications = $usernode->get('field_staff_profile_quals');
      foreach ($qualifications as $qualification) {
        $existing_terms[] = intval($qualification->get('target_id')->getValue());
      }

      $changed = false;
      // Check if we should add this qualification to the staff profile
      if (!in_array($course, $existing_terms)) {
        $usernode->field_staff_profile_quals[] = ['target_id' => $course];
        \Drupal::logger('staff_profile_primary')->info('Adding ' . $course . ' to ' . $usernode->get('field_staff_profile_netid')->value);
        $changed = true;
      }

      // See if we should add Web Editor qualification to the staff profile
      if (!in_array($editor_qualifications['Web Editor'], $existing_terms)) {
        $usernode->field_staff_profile_quals[] = ['target_id' => $editor_qualifications['Web Editor']];
        \Drupal::logger('staff_profile_primary')->info('Adding "Web Editor" to ' . $usernode->get('field_staff_profile_netid')->value);
        $changed = true;
      }

      // Save it if changed
      if ($changed) {
        $usernode->save();
      }
    }
  }
}

/*
 * Figure out staff position based on jobtitle, returns the taxonomy/vocabulary id of the position term
 *
 * TODO: This should lookup values in a taxonomy, not return hard coded values!
 */
function _staff_profile_primary_get_position($node, $staff_positions)
{
  $value = 0;

  // Look for Field Specialists
  if ($node->field_staff_profile_location->getString() == 'FLD-ISU-PD' && strlen($node->field_staff_profile_cty_served->getString()) > 0) {
    $value = ISUEOHelpers\Taxonomy::get_term_id('Field Specialist', $staff_positions, 'staff_positions', true);
  }

  // Look for Region Directors
  $nodeTitle = $node->get('field_staff_profile_job_title')->value;
  if ($nodeTitle == 'Assistant Director County Services' || $nodeTitle == 'Associate Director Extension and Outreach Services') {
    $value = ISUEOHelpers\Taxonomy::get_term_id('Regional Director', $staff_positions, 'staff_positions', true);
  }

  return $value;
}
