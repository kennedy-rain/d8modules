<?php

use \Drupal\node\Entity\Node;
use \Drupal\taxonomy\Entity\Term;
use Drupal\isueo_helpers\ISUEOHelpers;

/**
 * Implements hook_rebuild().
 */
function educational_programs_taxonomy_rebuild()
{
  educational_programs_taxonomy_handle_feeds();
}

/**
 * Implements hook_cron().
 */
function educational_programs_taxonomy_cron()
{
  educational_programs_taxonomy_handle_feeds();
}

/**
 * Pull in the feeds
 */
function educational_programs_taxonomy_handle_feeds()
{
  // Initialize some variables
  $terms_all = [];
  $terms_published_starting = [];
  $terms_published_ending = [];
  $terms_program_areas = [];

  // Get the Educational Programs from the Taxonomy
  $vid = 'educational_programs';
  $taxonomyStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  $terms_raw = $taxonomyStorage->loadByProperties(['vid' => $vid]);
  foreach ($terms_raw as $term) {
    $description = '';
    if (!empty($term->getDescription()) && !empty(strip_tags($term->getDescription()))) {
      $description = trim(strip_tags($term->getDescription()));
    }
    if (empty($description)) {
      // No description means it's a Program Area
      $terms_program_areas[$term->getName()] = $term;
    } else {
      // Description means it's a Program
      $terms_all[$description] = $term;
      if ($term->isPublished()) {
        $terms_published_starting[] = $term->id();
      }
    }
  }

  // Get the feed from MyData
  $fromFeed = ISUEOHelpers\Files::fetch_url('https://datastore.exnet.iastate.edu/mydata/EducationalPrograms.json');
  $fromFeed = str_replace('\u0026#039;', '\'', $fromFeed);
  $programs = json_decode($fromFeed, TRUE);

  // 0128Z000000yeo8QAA = Product Family Record Type
  // 012460000012EiaAAE = Educational Program Record Type
  // 0124p000000S43XAAS = Educational Service or Consultation
  $types = ['0128Z000000yeo8QAA', '012460000012EiaAAE', '0124p000000S43XAAS'];

  // Make sure we have some programs to work with
  if (empty($programs) || count($programs) < 10) {
    \Drupal::logger('educational_programs_taxonomy')->alert('Unable to read Educational Programs List from MyData, exiting ...');
    return;
  }

  // Now, step throught the list of programs from MyData
  foreach ($programs as $program) {
    // Skip programs that are not tagged public
    // Also skip the ones that aren't of the right record types
    if ($program['Public_Access__c'] == '0') continue;
    if (!in_array($program['RecordTypeId'], $types)) continue;

    // Parent is the Program Area, need to get the ID
    if (key_exists($program['hed__Account__r.Name'], $terms_program_areas)) {
      $parent_id = $terms_program_areas[$program['hed__Account__r.Name']]->id();
    } else {
      // Need to create this Program Area in the Taxonomy
      $parent = Term::create(array('vid' => $vid, 'name' => $program['hed__Account__r.Name']));
      $parent->save();
      $parent_id = $parent->id();
      $terms_program_areas[$program['hed__Account__r.Name']] = Term::load($parent_id);
    }

    // Check if the program is already in the Taxonomy
    if (key_exists($program['Id'], $terms_all)) {
      $existing_term = $terms_all[$program['Id']];
      $term_id = $existing_term->id();
      // If the term was unpublishe, or if the name has changed, then we should change them in the taxonomy
      if (!$existing_term->isPublished() || $existing_term->getName() != $program['Name']) {
        $existing_term->setName($program['Name']);
        $existing_term->parent = [$parent_id];
        $existing_term->setPublished();
        $existing_term->setChangedTime(time());
        $existing_term->save();
      }
    } else {
      // Need to create the program in the taxonomy
      $new_term = Term::create(array('vid' => $vid, 'name' => $program['Name'], 'description' => $program['Id'], 'parent' => [$parent_id]));
      $new_term->save();
      $term_id = $new_term->id();
    }
    $terms_published_ending[] = $term_id;
  }

  // Chech if there are any programs in the Taxonomy that should be unpublished
  foreach (array_diff($terms_published_starting, $terms_published_ending) as $id_to_unpublish) {
    $term = Term::load($id_to_unpublish);
    $term->setUnpublished();
    $term->save();
  }
}
